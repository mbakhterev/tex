@article{ride-16,
  author = {Михаил Олегович Бахтерев and Павел Александрович Васёв},
  title = {Об эффективной реализации системы RiDE},
  year = {2016},
  address = {Саров},
  journal = {XVI Международная конференция «Супервычисления и Математическое Моделирование». Тезисы},
  pages = {25--27}
}

@book{Turbak08:2,
  author = {Franklyn Turbak and David Gifford and Mark A. Sheldon},
  title = {Design Concepts in Programming Lan\-gua\-ges},
  year = {2008},
  address = {Cambridge},
  organization = {Massachusetts Institute of Technology},
  chapter = {2},

}

@book{Turbak08:2,
  author = {Franklyn Turbak and David Gifford and Mark A. Sheldon},
  title = {Design Concepts in Programming Lan\-gua\-ges},
  year = {2008},
  address = {Cambridge},
  organization = {Massachusetts Institute of Technology},
}


@book{tapl,
  author = {Бенджамин Пирс},
  title = {Типы в языках программирования},
  year = {2010},
  chapter = {20}
}

@book{csp,
  author = {Charles Antony Richard Hoare},
  title = {Communicating Sequential Processes},
  year = {2003},
  chapter = {1}
}

@article{intel,
 author = {Budimli\'{c}, Zoran and Burke, Michael and Cav{\'e}, Vincent and Knobe, Kathleen and Lowney, Geoff and Newton, Ryan and Palsberg, Jens and Peixotto, David and Sarkar, Vivek and Schlimbach, Frank and Ta\c{s}\irlar, Sa\u{g}nak},
 title = {Concurrent Collections},
 journal = {Sci. Program.},
 issue_date = {August 2010},
 volume = {18},
 number = {3-4},
 month = aug,
 year = {2010},
 issn = {1058-9244},
 pages = {203--217},
 numpages = {15},
 url = {http://dx.doi.org/10.1155/2010/521797},
 doi = {10.1155/2010/521797},
 acmid = {1938486},
 publisher = {IOS Press},
 address = {Amsterdam, The Netherlands, The Netherlands},
 keywords = {Concurrent Collections (CnC), parallel programming, programming model},
} 

@inproceedings{sisal,
 author = {O'Boyle, Michael and Hedayat, G. A.},
 title = {A Transformational Approach to Compiling Sisal for Distributed Memory Architectures}},
 booktitle = {Proceedings of the 6th International Conference on Supercomputing},
 series = {ICS '92},
 year = {1992},
 isbn = {0-89791-485-6},
 location = {Washington, D. C., USA},
 pages = {335--346},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/143369.143429},
 doi = {10.1145/143369.143429},
 acmid = {143429},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@article{tsys,
    author = {Абрамов, С. М. and Есин, И. Г. and Загоровский, И. М. and Матвеев, Г. А. and Роганов, В. А.},
    title = {Принципы организации отказоустойчивых параллельных вычислений для решения вычислительных задач и задач управления в Т-Системе с открытой архитектурой (OpenTS)},
    booktitle = {Международная конференция «Программные системы: теория и приложения»},
    year = {2006},
    volume = {1},
    pages = {257--264},
    publisher = {Наука,-Физматлит, М}
}

@incollection{oz,
  author    = {Gert Smolka},
  title     = {The Oz Programming Model},
  booktitle = {Computer Science Today},
  series    = {Lecture Notes in Computer Science},
  volume    = {1000},
  pages     = {324--343},
  publisher = {Springer},
  year      = {1995}
}

@incollection{por,
 author = {Gunter, C. A. and Scott, D. S.},
 chapter = {Semantic Domains},
 title = {Handbook of Theoretical Computer Science (Vol. B)},
 editor = {van Leeuwen, Jan},
 year = {1990},
 isbn = {0-444-88074-7},
 pages = {633--674},
 numpages = {42},
 url = {http://dl.acm.org/citation.cfm?id=114891.114903},
 acmid = {114903},
 publisher = {MIT Press},
 address = {Cambridge, MA, USA},
} 

@InProceedings{traces,
author="Mazurkiewicz, Antoni",
editor="Brauer, W.
and Reisig, W.
and Rozenberg, G.",
title="Trace theory",
booktitle="Petri Nets: Applications and Relationships to Other Models of Concurrency",
year="1987",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="278--324",
abstract="The concept of traces has been introduced for describing non-sequential behaviour of concurrent systems via its sequential observations. Traces represent concurrent processes in the same way as strings represent sequential ones. The theory of traces can be used as a tool for reasoning about nets and it is hoped that applying this theory one can get a calculus of the concurrent processes anologous to that available for sequential systems. The following topics will be discussed: algebraic properties of traces, trace models of some concurrency phenomena, fixed-point calculus for finding the behaviour of nets, modularity, and some applications of the presented theory.",
isbn="978-3-540-47926-0"
}

@article{mapreduce,
 author = {Dean, Jeffrey and Ghemawat, Sanjay},
 title = {MapReduce: Simplified Data Processing on Large Clusters},
 journal = {Commun. ACM},
 issue_date = {January 2008},
 volume = {51},
 number = {1},
 month = jan,
 year = {2008},
 issn = {0001-0782},
 pages = {107--113},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/1327452.1327492},
 doi = {10.1145/1327452.1327492},
 acmid = {1327492},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{annflow,
  author = {Авербух В.Л. and Анненкова О.Г. and Бахтерев М.О. and Манаков Д.В.,},
  title = {Анализ и оценка
систем визуализации программного обеспечения параллельных вычислени},
  year = {2015},
  address = {Саров},
  journal = {Вопросы атомной науки и техники (ВАНТ), серия математическое моделирование
физических процессов},
  number = {4},
  pages = {58-79}
}

@book{dcpl,
 author = {Turbak, Franklyn A. and Gifford, David K.},
 title = {Design Concepts in Programming Languages},
 year = {2008},
 isbn = {0262201755, 9780262201759},
 publisher = {The MIT Press},
}

@book{tapl,
 author = {Pierce, Benjamin C.},
 title = {Types and Programming Languages},
 year = {2002},
 isbn = {0262162091, 9780262162098},
 edition = {1st},
 publisher = {The MIT Press},
} 

@inproceedings{xi-dep,
 author = {Xi, Hongwei and Pfenning, Frank},
 title = {Dependent Types in Practical Programming},
 booktitle = {Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '99},
 year = {1999},
 isbn = {1-58113-095-3},
 location = {San Antonio, Texas, USA},
 pages = {214--227},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/292540.292560},
 doi = {10.1145/292540.292560},
 acmid = {292560},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{remora,
 author = {Slepak, Justin and Shivers, Olin and Manolios, Panagiotis},
 title = {An Array-Oriented Language with Static Rank Polymorphism},
 booktitle = {Proceedings of the 23rd European Symposium on Programming Languages and Systems - Volume 8410},
 year = {2014},
 isbn = {978-3-642-54832-1},
 pages = {27--46},
 numpages = {20},
 url = {http://dx.doi.org/10.1007/978-3-642-54833-8_3},
 doi = {10.1007/978-3-642-54833-8_3},
 acmid = {2961753},
 publisher = {Springer-Verlag New York, Inc.},
 address = {New York, NY, USA},
} 

@article{lime,
  author = {Михаил Олегович Бахтерев},
  title = {Потоковый механизм вывода графа программы в конструкторе компиляторов RiDE},
  year = {2017},
  address = {Ростов-на-Дону},
  journal = {Языки программирования и компиляторы},
  pages = {25--27}
}

@inproceedings{vG-89,
    author = {Augustsson, Lennart and Johnsson, Thomas},
    title = {Parallel Graph Reduction with the (v , G)-Machine},
    year = {1989},
    isbn = {0897913280},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/99370.99386},
    doi = {10.1145/99370.99386},
    booktitle = {Proceedings of the Fourth International Conference on Functional Programming Languages and Computer Architecture},
    pages = {202–213},
    numpages = {12},
    location = {Imperial College, London, United Kingdom},
    series = {FPCA '89}
}

@article{gunter-89,
  title={Semantic Domains and Denotational Semantics},
  author={Gunter, Carl A. and Mosses, Peter D. and Scott, Dana S.},
  year={1989},
  journal={DAIMI Report Series},
  volume={18}, 
  number={276},
  month={Apr.},
  url={https://tidsskrift.dk/daimipb/article/view/7630},
  DOI={10.7146/dpb.v18i276.7630},
  abstractNote={Denotational Semantics is a framework for the formal description
    of programming language semantics. The main idea of Denotational Semantics
    is that each phrase of the described language is given a denotation: a
    mathematical object that represents the contribution of the phrase to the
    meaning of any program in which it occurs. Moreover, the denotation of
    each phrase is determined just by the denotations of its subphrases. This
    report consists of two chapters. The first, Semantic Domains, was written
    by Gunter and Scott. It is concerned with the theory of domains of
    denotations. The second, Denotational Semantics, was written by Mosses. It
    explains the formal notation used in denotational descriptions, and
    illustrates the major standard technigues for finding denotations of
    programming constructs. Both chapters are to appear in the forthcoming
    Handbook of Theoretical Computer Science (North-Holland).} }

@inproceedings{wadler-95,
  author = {Wadler, Philip},
  title = {Monads for Functional Programming},
  year = {1995},
  isbn = {3540594515},
  publisher = {Springer-Verlag},
  address = {Berlin, Heidelberg},
  booktitle = {Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques-Tutorial Text},
  pages = {24–52},
  numpages = {29}
}

@book{nnn-10,
  title = {Основания языков программирования},
  author = {Митчел, Джон},
  publisher = {Регулярная и хаотическая динамика},
  address = {Москва, Ижевск},
  year = {2010},
  isbn = {978-5-93972-757-0}
}

@book{turbak-08,
  author = {Turbak, Franklyn A. and Gifford, David K.},
  title = {Design Concepts in Programming Languages},
  year = {2008},
  isbn = {0262201755},
  publisher = {The MIT Press},
  abstract = {Hundreds of programming languages are in use todayscripting
    languages for Internet commerce, user interface programming tools,
    spreadsheet macros, page format specification languages, and many others.
    Designing a programming language is a metaprogramming activity that bears
    certain similarities to programming in a regular language, with clarity
    and simplicity even more important than in ordinary programming. This
    comprehensive text uses a simple and concise framework to teach key ideas
    in programming language design and implementation. The book's unique
    approach is based on a family of syntactically simple pedagogical
    languages that allow students to explore programming language concepts
    systematically. It takes as its premise and starting point the idea that
    when language behaviors become incredibly complex, the description of the
    behaviors must be incredibly simple. The book presents a set of tools (a
    mathematical metalanguage, abstract syntax, operational and
    denotational semantics) and uses it to explore a comprehensive set of
    programming language design dimensions, including dynamic semantics
    (naming, state, control, data), static semantics (types, type
    reconstruction, polymporphism, effects), and pragmatics (compilation,
    garbage collection). The many examples and exercises offer students
    opportunities to apply the foundational ideas explained in the text.
    Specialized topics and code that implements many of the algorithms and
    compilation methods in the book can be found on the book's Web site,
    along with such additional material as a section on concurrency and proofs
    of the theorems in the text. The book is suitable as a text for an
    introductory graduate or advanced undergraduate programming languages
    course; it can also serve as a reference for researchers and
    practitioners. }
}


@conference{meijer-91-simple,
  title = {Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire},
  author = {Erik Meijer and J. Hughes and M.M. Fokkinga and Ross Paterson},
  year = {1991},

  abstract = {We develop a calculus for lazy functional programming based on
    recursion operators associated with data type definitions. For these
    operators we derive various algebraic laws that are useful in deriving and
    manipulating programs. We shall show that all example functions in Bird
    and Wadler's "Introduction to Functional Programming" can be expressed
    using these operators.},

  keywords = {EWI-7281, IR-56289},
  note = {Imported from EWI/DB PMS [db-utwente:inpr:0000003415]; 5th ACM
    Conference on Functional Programming Languages and Computer Architecture
    (FPCA 1991) ; Conference date: 26-08-1991 Through 30-08-1991},

  month = aug,
  doi = {10.1007/3540543961_7},
  language = {English},
  pages = {124--144}
}

@incollection{meijer-91,
  abstract = {{We develop a calculus for lazy functional programming based on recursion operators associated with data type definitions. For these operators we derive various algebraic laws that are useful in deriving and manipulating programs. We shall show that all example functions in Bird and Wadler's Introduction to Functional Programming can be expressed using these operators.}},
  author = {Meijer, Erik and Fokkinga, Maarten and Paterson, Ross},
  biburl = {https://www.bibsonomy.org/bibtex/231553477daf799f06f78cbfff77b4380/alexv},
  booktitle = {Functional Programming Languages and Computer Architecture},
  doi = {10.1007/3540543961\_7},
  editor = {Hughes, John},
  journal = {Functional Programming Languages and Computer Architecture},
  keywords = {functional-programming program-transformation},
  pages = {124--144},
  priority = {3},
  publisher = {Springer Berlin Heidelberg},
  series = {Lecture Notes in Computer Science},
  title = {{Functional programming with bananas, lenses, envelopes and barbed wire}},
  url = {http://eprints.eemcs.utwente.nl/7281/01/db-utwente-40501F46.pdf},
  volume = 523,
  year = 1991
}

@book{pierce-14,
  title = {Типы в языках программирования},
  author = {Пирс, Бенджамин},
  publisher = {Лямбда Пресс, Добросвет},
  address = {Москва},
  year = 2014,
  isbn = {978-5-7913-0082-9}
}

@booklet{morozov-20,
  author = {Морозов, А.С},
  title = {Денотационная семантика языков программирования},
  year = 2020,
  howpublished = "\url{math.nsc.ru/~asm256/lambda/LambdaDec2020.pdf}",
  address = {Новосибирск}
}

@booklet{diehl-20,
  author = {Diehl, Stephen},
  title = {What I Wish I Knew When Learning {Haskell} (v2.5)},
  year = 2020,
  howpublished = "\url{http://dev.stephendiehl.com/hask/tutorial_print.pdf}",
  pages = 482
}

@article{peyton-jones-11,
  author       = {Vytiniotis, Dimitrios and Peyton Jones, Simon and Schrijvers, Tom and Sulzmann, Martin},
  issn         = {0956-7968},
  journal      = {Journal of Functional Programming},
  keywords     = {type system, type inference, local assumtions, type classes, GADTs, type families, Haskell,
                  constraint handling rules, congruence closure},
  language     = {eng},
  number       = {4-5},
  pages        = {333--412},
  title        = {{OutsideIn(X)}: modular type inference with local assumptions},
  url          = {http://dx.doi.org/10.1017/S0956796811000098},
  volume       = {21},
  year         = {2011},
  abstract     = {Advanced type system features, such as GADTs, type classes and type families, have proven to be invaluable language extensions for ensuring data invariants and program correctness. Unfortunately, they pose a tough problem for type inference when they are used as local type assumptions. Local type assumptions often result in the lack of principal types and cast the generalisation of local let-bindings prohibitively difficult to implement and specify. User-declared axioms only make this situation worse. In this paper, we explain the problems and - perhaps controversially - argue for abandoning local let-binding generalisation. We give empirical results that local let generalisation is only sporadically used by Haskell programmers. Moving on, we present a novel constraint-based type inference approach for local type assumptions. Our system, called OUTSIDEIN(X), is parameterised over the particular underlying constraint domain X, in the same way as HM(X). This stratification allows us to use a common metatheory and inference algorithm. OUTSIDEIN(X) extends the constraints of X by introducing implication constraints on top. We describe the strategy for solving these implication constraints, which, in turn, relies on a constraint solver for X. We characterise the properties of the constraint solver for X so that the resulting algorithm only accepts programs with principal types, even when the type system specification accepts programs that do not enjoy principal types. Going beyond the general framework, we give a particular constraint solver for X = type classes + GADTs + type families, a non-trivial challenge in its own right. This constraint solver has been implemented and distributed as part of GHC 7.}
}

@INPROCEEDINGS{moggi-89,
  author={Moggi, Eugenio},
  booktitle={[1989] Proceedings. Fourth Annual Symposium on Logic in Computer Science}, 
  title={Computational lambda-calculus and monads}, 
  year={1989},
  volume={},
  number={},
  pages={14-23},
  doi={10.1109/LICS.1989.39155}
}

@article{moggi-91,
  title = {Notions of computation and monads},
  journal = {Information and Computation},
  volume = {93},
  number = {1},
  pages = {55-92},
  year = {1991},
  note = {Selections from 1989 IEEE Symposium on Logic in Computer Science},
  issn = {0890-5401},
  doi = {https://doi.org/10.1016/0890-5401(91)90052-4},
  url = {https://www.sciencedirect.com/science/article/pii/0890540191900524},
  author = {Moggi, Eugenio},
  abstract = {The λ-calculus is considered a useful mathematical tool in the study of programming languages, since programs can be identified with λ-terms. However, if one goes further and uses βη-conversion to prove equivalence of programs, then a gross simplification is introduced (programs are identified with total functions from values to values) that may jeopardise the applicability of theoretical results. In this paper we introduce calculi, based on a categorical semantics for computations, that provide a correct basis for proving equivalence of programs for a wide range of notions of computation.}
}

@book{okasaki-98,
  author = {Okasaki, Chris},
  title = {Purely Functional Data Structures},
  year = {1998},
  isbn = {0521631246},
  publisher = {Cambridge University Press},
  address = {USA}
}

@book{kernighan-05,
  title     = {The C Programming Language},
  author    = {Kernighan, Brian W.},
  isbn      = {9780131193710},
  lccn      = {77028983},
  series    = {Prentice-Hall software series},
  year      = {2005},
  publisher = {Prentice Hall},
  edition   = {2nd},
  pages     = {272}
}

@book{stroustrup-13,
  author = {Stroustrup, Bjarne},
  title = {The C++ Programming Language},
  year = {2013},
  isbn = {0321563840},
  publisher = {Addison-Wesley Professional},
  edition = {4th},
  pages={1368},
  abstract = {C++11 has arrived: thoroughly master it, with the definitive new guide from C++ creator
    Bjarne Stroustrup, C++ Programming Language, Fourth Edition! The brand-new edition
    of the world's most trusted and widely read guide to C++, it has been comprehensively
    updated for the long-awaited C++11 standard. Extensively rewritten to present the
    C++11 language, standard library, and key design techniques as an integrated whole,
    Stroustrup thoroughly addresses changes that make C++11 feel like a whole new language,
    offering definitive guidance for leveraging its improvements in performance, reliability,
    and clarity. C++ programmers around the world recognize Bjarne Stoustrup as the go-to
    expert for the absolutely authoritative and exceptionally useful information they
    need to write outstanding C++ programs. Now, as C++11 compilers arrive and development
    organizations migrate to the new standard, they know exactly where to turn once more:
    Stoustrup's C++ Programming Language, Fourth Edition.}
}

@booklet{scheme-13,
  title     = {Revisited 7 Report on the Algorithmic Language {Scheme}},
  editor    = {Shinn, Alex and Cowan, John and ARTHUR A. Gleckler, Arthur A.},
  author    = {Ganz, Steven and Radul, Alex and Shivers, Olin
               and Hsu, Aaron W. and Read, Jeffrey T. and Snell-pym, Alaric
               and Lucier, Bradley and Rush, David and Sussman, Gerald J.
               and Medernach Emmanuel and Russel, Benjamin L.},
  howpublished = "\url{https://small.r7rs.org/attachment/r7rs.pdf}",
  year      = 2013,
  month     = apr,
  pages     = 88
}

@article{berger-19,
  author = {Berger, Emery D. and Hollenbeck, Celeste and Maj, Petr and Vitek, Olga and Vitek, Jan},
  title = {On the Impact of Programming Languages on Code Quality: A Reproduction Study},
  year = {2019},
  issue_date = {December 2019},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {41},
  number = {4},
  issn = {0164-0925},
  url = {https://doi.org/10.1145/3340571},
  doi = {10.1145/3340571},
  journal = {ACM Trans. Program. Lang. Syst.},
  month = oct,
  articleno = {21},
  numpages = {24},
  keywords = {Programming Languages on Code Quality},
  abstract = {In a 2014 article, Ray, Posnett, Devanbu, and Filkov claimed to have uncovered a statistically
  significant association between 11 programming languages and software defects in 729
  projects hosted on GitHub. Specifically, their work answered four research questions
  relating to software defects and programming languages. With data and code provided
  by the authors, the present article first attempts to conduct an experimental repetition
  of the original study. The repetition is only partially successful, due to missing
  code and issues with the classification of languages. The second part of this work
  focuses on their main claim, the association between bugs and languages, and performs
  a complete, independent reanalysis of the data and of the statistical modeling steps
  undertaken by Ray et al. in 2014. This reanalysis uncovers a number of serious flaws
  that reduce the number of languages with an association with defects down from 11
  to only 4. Moreover, the practical effect size is exceedingly small. These results
  thus undermine the conclusions of the original study. Correcting the record is important,
  as many subsequent works have cited the 2014 article and have asserted, without evidence,
  a causal link between the choice of programming language for a given task and the
  number of software defects. Causation is not supported by the data at hand; and, in
  our opinion, even after fixing the methodological flaws we uncovered, too many unaccounted
  sources of bias remain to hope for a meaningful comparison of bug rates across languages.}
}

@book{hudak-18,
  title     = {The Haskell School of Music: From Signals to Symphonies},
  author    = {Hudak, Paul and Quick, Donya},
  year      = 2018,
  publisher = {Cambridge University Press},
  isbn      = {9781108241861}
}
